#!/usr/bin/env python3
'''
Copyright 2019-2021 Duncan Deveaux

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
'''

import sys
import numpy as np
from sklearn.linear_model import LogisticRegression
import argparse
import pickle
import pandas as pd
sys.path.append('..')
from tools.exit_model import gather_training_data, process_training_data
from tools import locations

# ................................................................. #
# Plot correlation data from the json files generated by parse.py #
# ................................................................. #

'''
Run script to generate graphs about the trained model
'''
if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--location",
        help="The location ID to analyze.",
        type=int)
    argsparse = parser.parse_args()

    input_ids = locations.get_input_for_location(argsparse.location)
    print(
        "Input files for location {}: {}".format(
            argsparse.location,
            input_ids))

    # Normalize training data
    training_data = np.array(
        gather_training_data(
            input_ids,
            101010,
            filterout=False,
            interaction=False))
    # Remove absolute distance data
    training_data = np.delete(training_data, 2, axis=1)
    training_data[:, 0] /= training_data[:, 0].max()

    # Revert origin of the lateral position scale
    training_data[:, 0] = 1 - training_data[:, 0]

    df = pd.DataFrame(
        data=training_data,
        index=None,
        columns=[
            'Lane',
            'Heading',
            'DistanceRel',
            'MeanApproachSpeed',
            'MeanDensity',
            'Flow',
            'Capacity_German',
            'Capacity_HCM2016',
            'FOC_German',
            'FOC_HCM2016',
            'NextExit'])

    training_cols = ['Lane', 'Heading', 'DistanceRel', 'NextExit']

    training_data = df[training_cols].to_numpy()
    np.random.shuffle(training_data)
    print(training_data[0:5])

    print("Training samples: {}".format(len(training_data)))

    # ..................................... #
    # B. Perform a Logistic Regression .... #
    # ..................................... #

    # 1. Training & Validation sets
    (x_training, y_training, x_validation,
     y_validation) = process_training_data(training_data)

    # 2. Perform regression
    regression = LogisticRegression()
    regression.fit(x_training, y_training)
    print(regression.classes_)

    true_class = [i for i in range(
        len(regression.classes_)) if regression.classes_[i]][0]
    print(true_class)

    accuracy = regression.score(x_validation, y_validation)
    print("accuracy: {}".format(accuracy))

    pickle.dump(regression, open(
        "trained_models/RounD_{}.pickle".format(argsparse.location), "wb"))
