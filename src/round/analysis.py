#!/usr/bin/env python3
'''
Copyright 2019-2021 Duncan Deveaux

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
'''

import sys
import argparse
import json
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42
sys.path.append('..')
from tools import locations
from tools.ttc_correlation import TTCTimeline, TTCData, VariationDataset


def plot_pattern(ttcdata, risk_mode):
    (x, y_ttc, error_ttc) = (np.array(ttcdata.x), np.array(
        ttcdata.ttc_values), np.array(ttcdata.ttc_errors))

    '''
    warnings_x = []
    for risk in ttcdata.risk_events[risk_mode]:
        warnings_x.append(risk['time'])

    warnings_y = []
    for _ in warnings_x:
        warnings_y.append(0)
    plt.scatter(warnings_x, warnings_y, label="threshold: {}".format(risk_mode))
    '''

    plt.xlabel('Time (s)')
    #plt.fill_between(x, y_ttc-error_ttc, y_ttc+error_ttc, color='b', alpha=0.3)
    plt.ylabel('Average of Low TTC values (<10s) in the roundabout (s)')
    plt.plot(x * 10, y_ttc, label='', color='b', linestyle='--', marker='o')
    plt.plot([np.min(x) * 10, np.max(x) * 10], [2, 2],
             label='Critical TTC Threshold, e.g., 2s', linewidth=2, color='black')
    plt.legend()

    plt.title('Variation of Low TTC values (<5s) during a 5-minute recording')
    plt.show()


# ................................................................. #
# Plot correlation data from the pickle files generated by parse.py #
# ................................................................. #

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--location", help="The location ID to analyze.", type=int)
    parser.add_argument(
        "--input",
        help="The directory where the pickle files generated by parse.py are located.",
        default='ttc_parse')
    parser.add_argument(
        "--ttclimit",
        help="The maximal TTC value to be considered to compute TTC values variation, in seconds.",
        type=float,
        default=7.5)
    parser.add_argument(
        "--cvtime",
        help="The amount of TTC data history to be considered when computing the Coefficient of Variation, in seconds.",
        type=float,
        default=300.0)
    parser.add_argument(
        "--riskmode",
        help="TTC Threshold in second [1,2,3,4,5,6].",
        type=int,
        default=2)
    argsparse = parser.parse_args()

    input_ids = locations.get_input_for_location(argsparse.location)
    print("Input files for location {}: {}".format(argsparse.location, input_ids))

    input_ids = ['09']
    ttc_data = []
    for id_str in input_ids:

        timelines = []

        with open('{}/round_ttc_{}.json'.format(argsparse.input, id_str)) as fjson:
            data = json.load(fjson)
            for (noise, tl_dict) in data:
                tl = TTCTimeline([1, 2, 3, 4, 5, 6], 25.0)
                tl.load_dict(tl_dict)

                timelines.append((noise, tl))

        # Break the TTCTimeline into 5 minutes sections
        timeline = None
        for (noise, t) in timelines:
            if noise == 0:
                timeline = t
                break

        framerate = timeline.framerate

        averaging_step = 250.0
        time_break = argsparse.cvtime  # in seconds

        sub_ttcdata = TTCData.from_ttc_timeline(
            timeline,
            5,
            averaging_step,
            time_break *
            framerate /
            averaging_step)
        ttc_data.extend(sub_ttcdata)

    plot_pattern(ttc_data[2], 3)

    corr_analysis = VariationDataset([1, 2, 3, 4, 5, 6])
    for item in ttc_data:
        corr_analysis.append_variation(item)

    #corr_analysis.plot_scatter("Relationship between the CV of TTC Values and Various Levels of Risk (rounD)")
    corr_analysis.plot_risk_comparison(
        "Relationship Between TTC Variation and Defined Risk Metrics, for a TTC Threshold of " +
        r"$\bf{" +
        '{}'.format(
            argsparse.riskmode) +
        "}$" +
        " " +
        r"$\bf{seconds}$" +
        ".",
        risk_mode=argsparse.riskmode)
    #corr_analysis.plot_correlation("Correlation between the CV of TTC Values and Various Levels of Risk (rounD)")
